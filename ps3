augumented matrix:
import sympy as sp

def get_equation():
    equation = input("Enter equation (e.g. 2*x1 + 3*x2 = 7): ")
    lhs, rhs = equation.split('=')
    lhs = sp.sympify(lhs)
    rhs = sp.sympify(rhs)
    return lhs, rhs

def print_matrix(matrix):
    for row in matrix:
        print(" ".join(f"{num:.1f}" for num in row))
        
def create_augmented_matrix(num_equations, num_variables):
    variables = [f"x{i}" for i in range(1, num_variables + 1)]
    vars = sp.symbols(' '.join(variables))

    matrix = []
    for i in range(num_equations):
        lhs, rhs = get_equation()
        row = [lhs.coeff(var) for var in vars] + [rhs]
        matrix.append(row)

    matrix = sp.Matrix(matrix)
    return matrix

def main():
    num_equations = int(input("Enter the number of equations: "))
    num_variables = int(input("Enter the number of variables: "))

    matrix = create_augmented_matrix(num_equations, num_variables)
    print("Augmented Matrix:")
    print(matrix)

if __name__ == "__main__":
    main()
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
check echoleon form :-
import sympy
import numpy

def CheckEcholenForm():
    number_of_rows = int(input('Enter the number of rows : '))
    number_of_columns = int(input('Enter the number of columns : '))
    
    print('Enter the list of elements : ',end = '')
    entries = list(map(int,input().split()))
    
    matrix = numpy.array(entries).reshape(number_of_rows,number_of_columns)
    print(matrix)
    
    for i in range(number_of_rows):
        if len(numpy.where(matrix[i,:i] != 0)[0]) != 0:
            if len(numpy.where(matrix[i,:i] == 0)[0]) < i :
                print('The Matrix is not in REF and not in RREF')
                return
            
    print('The Given Matrix is in REF')
    
    for i in range(number_of_rows):
        if len(numpy.where(matrix[i,:] == 1)[0]) != 0:
            index = numpy.where(matrix[i,:] == 1)[0][0]
            if len(numpy.where(matrix[:,index] == 0)[0]) != number_of_rows - 1 and matrix[i,index] == 1:
                print('The Given Matrix is not in RREF')
                return
    print('The Given Matrix is in RREF')
    
if __name__=='__main__':
    values = 0
    CheckEcholenForm()
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
jordan elimination:-
import numpy as np

def gauss_jordan_elimination(matrix, tol=1e-12):
    A = np.copy(matrix)
    rows, cols = A.shape
    rank = 0
    
    for col in range(cols):
        if rank >= rows:
            break
        
        # Find the pivot row
        pivot_row = None
        for row in range(rank, rows):
            if abs(A[row, col]) > tol:
                pivot_row = row
                break
        
        if pivot_row is None:
            continue
        
        # Swap the pivot row with the current row
        A[[rank, pivot_row]] = A[[pivot_row, rank]]
        
        # Normalize the pivot row
        A[rank] = A[rank] / A[rank, col]
        
        # Eliminate all other entries in the pivot column
        for row in range(rows):
            if row != rank:
                A[row] -= A[row, col] * A[rank]
        
        rank += 1
    
    # Round very small values to zero
    A[np.abs(A) < tol] = 0
    
    return A, rank


if __name__=='__main__':  
    
    m = int(input("Enter no. of rows: "))
    n = int(input("Enter no. of columns: "))
    
    
    print("Enter the elements of the matrix in single line seperated by space: ")
    entries = list(map(float, input().split()))
     
    matrix = np.array(entries).reshape(m, n)
    print(f"\nGiven matrix:")
    print(matrix)
    
    rref,rank = gauss_jordan_elimination(matrix)
    print(f"\nRREF:")
    print(rref)

    print(f"\nRank: {rank}")
    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
find solution:-
import sympy as sp
import numpy as np

def Augumented_matrix(matrix, eqns, x, no_eq, no_unknowns):
    for i in range(no_eq):
        eq = sp.sympify(eqns[i][0])
        for j in range(no_unknowns):
            matrix[i,j] = eq.coeff(x[j],1)          	#coeff(term,degree)
            matrix[i,no_unknowns] = float(eqns[i][1])   	#for constant term
    return matrix

def find_rref(matrix, tol=1e-12):
    A = np.copy(matrix)
    rows, cols = A.shape
    rank = 0

    for col in range(cols):
        if rank >= rows:
            break
        # Find the pivot row
        pivot_row = None
        for row in range(rank, rows):
            if abs(A[row, col]) > tol:
                pivot_row = row
                break
        
        if pivot_row is None:
            continue
        
        # Swap the pivot row with the current row
        A[[rank, pivot_row]] = A[[pivot_row, rank]]
        # Normalize the pivot row
        A[rank] = A[rank] / A[rank, col]

        # Eliminate all other entries in the pivot column
        for row in range(rows):
            if row != rank:
                A[row] -= A[row, col] * A[rank]
        
        rank += 1

    # Round very small values to zero
    A[np.abs(A) < tol] = 0
    return A, rank

def find_sol(eqns, x, no_eq, no_unknowns):
    matrix = np.zeros([no_eq, no_unknowns + 1])
    matrix = Augumented_matrix(matrix, eqns, x, no_eq, no_unknowns)
    rref, rank = find_rref(matrix)
    
    if rank < no_eq:
        print("The given system of equations have 'No solution'")
        return None
    
    else:
        equations = []
        solutions = []
        
        for i in range(no_eq):
            # Construct the left-hand side of the equation
            lhs_terms = []
            for j in range(no_unknowns):
                term = f'({rref[i, j]})*{x[j]}'
                lhs_terms.append(term)
            lhs = " + ".join(lhs_terms)
            
            # Create the equation using SymPy
            equation = sp.Eq(sp.sympify(lhs), rref[i, -1])
            equations.append(equation)
        
        
        print(f"\nThe solution:")
        for i in range(no_eq):
            solutions.append(list(sp.solveset(equations[i],x[i]))[0])
            if no_eq == no_unknowns:
                print(f'x{i+1} = {solutions[-1]}')
    
        
        if no_eq < no_unknowns:
            print("The given system has infinite solution!")
            free_var = no_unknowns - no_eq
            t = [sp.symbols(f't{i}') for i in range(1,free_var+1)]
            
            k=1
            for sol in solutions:
                for j in range(free_var):
                    solution = sol.subs(x[no_eq + j],t[j])
                    print(f'x{k} = {solution}')
                    k += 1
            #printing range
            print('For all ',end = '')
            free_var_list = [f'x{no_eq + i + 1} = t{i + 1}' for i in range(free_var)]
            free_vars_string = ', '.join(free_var_list) + ' >= 0'
            print(free_vars_string)
    
    return solutions

if __name__ == '__main__':  
    no_eq = int(input("Enter no. of equations: "))
    no_unknowns = int(input("Enter no. of unknowns: "))

    x = [sp.symbols(f'x{i}') for i in range(1,no_unknowns+1)]

    eqns = []

    print(f"\nEnter equations in terms of x1,x2,x3,...")
    for i in range(1,no_eq+1):
        eq = input(f"Enter Eq{i}: ")
        eqns.append(eq.split('='))

    for i in range(no_eq):
        eqns[i][0] = eqns[i][0].replace(" ", "")  # remove spaces from the equation

    solutions = find_sol(eqns, x, no_eq, no_unknowns)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
seidal:-
import numpy as np

def print_iteration(iteration, values):
    print(f"{iteration:<10}{' '.join(f'{value:10.6f}' for value in values)}")

def gauss_seidel(coefficients, constants, initial_guess, tolerance, max_iterations):
    n = len(constants)
    x = initial_guess.copy()
   
    print("\nIteration Table:")
    print("{:<10}{}".format("Iteration", "Values"))
   
    for iteration in range(1, max_iterations + 1):
        maxdiff = 0
        x_new = x.copy()
       
        for i in range(n):
            sum_ = sum(coefficients[i][j] * x_new[j] if j != i else 0 for j in range(n))
            y = (constants[i] - sum_) / coefficients[i][i]
           
            diff = abs(y - x[i])
            if diff > maxdiff:
                maxdiff = diff
               
            x[i] = y
       
        print_iteration(iteration, x)
       
        if maxdiff < tolerance:
            return x
       
    return x

def verify_solution(coefficients, constants, solution):
    n = len(constants)
    for i in range(n):
        sum_ = sum(coefficients[i][j] * solution[j] for j in range(n))
        result = sum_ - constants[i]
        print(f"Equation {i+1}: {result:.6f} ~= 0")
        
def q5():
    n = int(input("Enter the number of variables: "))
   
    print("Enter the coefficients matrix:")
    coefficients = []
    for i in range(n):
        row = list(map(float, input(f"Enter row {i + 1}: ").split()))
        coefficients.append(row)
   
    print("Enter the constants vector:")
    constants = list(map(float, input().split()))
   
    print("Enter the initial guess:")
    initial_guess = list(map(float, input().split()))
   
    tolerance = 0.001
    max_iterations = int(input("Enter the maximum number of iterations: "))
   
    print("\nInitial Guess:")
    print_iteration(0, initial_guess)
   
    solution = gauss_seidel(coefficients, constants, initial_guess, tolerance, max_iterations)
   
    print("\nFinal Solution:")
    print_iteration("Final", solution)
    
    print("\nVerifying Solution:")
    verify_solution(coefficients, constants, solution)

if __name__ == "__main__":
    q5()
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
jordan:-
import numpy as np

def print_iteration(iteration, values):
    print(f"{iteration:<10}{' '.join(f'{value:10.6f}' for value in values)}")

def gauss_jordan(coefficients, constants, tolerance):
    n = len(constants)
    augmented_matrix = np.column_stack((coefficients, constants))
   
    print("\nAugmented Matrix:")
    print(augmented_matrix)
   
    for i in range(n):
        pivot = augmented_matrix[i][i]
        augmented_matrix[i] = augmented_matrix[i] / pivot
       
        for j in range(n):
            if i != j:
                multiplier = augmented_matrix[j][i]
                augmented_matrix[j] = augmented_matrix[j] - multiplier * augmented_matrix[i]
       
        print(f"\nIteration {i+1}:")
        print(augmented_matrix)
       
    solution = augmented_matrix[:, -1]
    return solution

def verify_solution(coefficients, constants, solution):
    n = len(constants)
    for i in range(n):
        sum_ = sum(coefficients[i][j] * solution[j] for j in range(n))
        result = sum_ - constants[i]
        print(f"Equation {i+1}: {result:.6f} ~= 0")
        
def q6():
    n = int(input("Enter the number of variables: "))
   
    print("Enter the coefficients matrix:")
    coefficients = []
    for i in range(n):
        row = list(map(float, input(f"Enter row {i + 1}: ").split()))
        coefficients.append(row)
   
    print("Enter the constants vector:")
    constants = list(map(float, input().split()))
   
    tolerance = 0.001
   
    print("\nAugmented Matrix:")
    solution = gauss_jordan(coefficients, constants, tolerance)
   
    print("\nFinal Solution:")
    print(solution)
    
    print("\nVerifying Solution:")
    verify_solution(coefficients, constants, solution)

if __name__ == "__main__":
    q6()
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
jordan inverse:-
import numpy as np

def gauss_jordan_inverse(matrix, tol=1e-12):
    A = np.copy(matrix)
    rows, cols = A.shape
    rank = 0
    
    for col in range(cols):
        if rank >= rows:
            break

        pivot_row = None
        for row in range(rank, rows):
            if abs(A[row, col]) > tol:
                pivot_row = row
                break
        
        if pivot_row is None:
            continue

        A[[rank, pivot_row]] = A[[pivot_row, rank]]
        A[rank] = A[rank] / A[rank, col]
        
        for row in range(rows):
            if row != rank:
                A[row] -= A[row, col] * A[rank]
        
        rank += 1

    A[np.abs(A) < tol] = 0

    return A, rank


if __name__=='__main__':  
    
    m = int(input("Enter no. of rows: "))
    n = int(input("Enter no. of columns: "))
    
    print("Enter the elements of the matrix in single line seperated by space: ")
    entries = list(map(float, input().split()))

    matrix = np.array(entries).reshape(m, n)
    print(f"\nGiven matrix:")
    print(matrix)
    
        
    if m!=n:
        print("The matrix is not square matrix!")
        print("Inverse cannot be found")
        
    else:
        #creating identity matrix for the matrix of given shape
        identity_matrix = np.eye(matrix.shape[0])
        result_matrix = np.hstack((matrix, identity_matrix))
        
        result_matrix_size = result_matrix.shape[0]
        
        solved_matrix,rank = gauss_jordan_inverse(result_matrix)
        inv_matrix = solved_matrix[:, result_matrix_size:]
        
        print(f"\nInverse matrix:")
        print(inv_matrix)
    
        print(f"\nRank: {rank}")
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
input 
import numpy as np
import sympy as sp

eqns = []

no_eq = int(input("Enter no. of equations: "))
no_unknowns = int(input("Enter no. of unknowns: "))
x = [sp.symbols(f'x{i}') for i in range(1,no_unknowns+1)]

def matrix_input():
    m = int(input("Enter no. of rows: "))
    n = int(input("Enter no. of columns: "))
    
    print("Enter the elements of the matrix in single line seperated by space: ")
    entries = list(map(float, input().split()))

    matrix = np.array(entries).reshape(m, n)
    print(f"\nGiven matrix:")
    print(matrix)
    return matrix


def equations_input():
    print(f"\nEnter equations in terms of x1,x2,x3,...")
    for i in range(1,no_eq+1):
    	eq = input(f"Enter Eq{i}: ")
    	eqns.append(eq.split('='))
        
    matrix = np.zeros([no_eq, no_unknowns + 1])
    matrix = Augumented_matrix(matrix)
    return matrix


def Augumented_matrix(matrix):
    for i in range(no_eq):
        eq = sp.sympify(eqns[i][0])
        for j in range(no_unknowns):
            matrix[i,j] = eq.coeff(x[j],1)          	#coeff(term,degree)
            matrix[i,no_unknowns] = float(eqns[i][1])   	#for constant term
    return matrix


def convert_RREF(matrix):
    mat = sp.Matrix(matrix)
    M_rref, pivot_columns = mat.rref()
    print(f"\nThe Reduced Row Echelon Form (RREF) is:")
    print(M_rref)


def convert_REF(matrix):
    mat = sp.Matrix(matrix)
    ref = mat.echelon_form()
    print(f"\nThe Row Echelon Form (REF) is:")
    print(ref)
    
    
def inverse(matrix):
    print(np.linalg.inv(matrix))
    
    
def solving_Eqns():   
    lhs = []
    rhs = []
    print(f"\nEnter equations in terms of x1,x2,x3,...")
    for i in range(1,no_eq+1):
        eq = input(f"Enter Eq{i}: ")
        lhs.append(eq.split('=')[0].strip())
        rhs.append(eq.split('=')[1].strip())
    #solving eqns
    sol = np.linalg.solve(lhs, rhs)
    print(sol)
    
    
if __name__=='__main__':  
    
    matrix = equations_input()
    matrix = matrix_input()
    
    matrix = Augumented_matrix(matrix)
    
    convert_RREF(matrix)
    convert_REF(matrix)
    inverse(matrix)
    solving_Eqns()
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
